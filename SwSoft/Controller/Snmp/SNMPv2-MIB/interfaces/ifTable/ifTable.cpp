/*
 * Note: this file originally auto-generated by mib2c using
 *        : mib2c.scalar.conf 17337 2009-01-01 14:28:29Z magfr $
 */

#include "SystemInclude.h"
#include "BcmController.h"

#include <net-snmp/net-snmp-config.h>
#include <net-snmp/net-snmp-includes.h>
#include <net-snmp/agent/net-snmp-agent-includes.h>

#include "Debug.h"
#include "SystemInfoMgt.h"
#include "ifTable.h"

using namespace std;
CxxBeginNameSpace(Snmp)
CxxBeginNameSpace(Interfaces)

typedef int (*SnmpOperationHandler)(netsnmp_mib_handler&,
    netsnmp_handler_registration&,
    netsnmp_agent_request_info&,
    netsnmp_request_info&);

int Get(netsnmp_mib_handler&, netsnmp_handler_registration&,
    netsnmp_agent_request_info&, netsnmp_request_info&);
int SetReserve1(netsnmp_mib_handler&, netsnmp_handler_registration&,
    netsnmp_agent_request_info&, netsnmp_request_info&);
int SetReserve2(netsnmp_mib_handler&, netsnmp_handler_registration&,
    netsnmp_agent_request_info&, netsnmp_request_info&);
int SetFree(netsnmp_mib_handler&, netsnmp_handler_registration&,
    netsnmp_agent_request_info&, netsnmp_request_info&);
int SetAction(netsnmp_mib_handler&, netsnmp_handler_registration&,
    netsnmp_agent_request_info&, netsnmp_request_info&);
int SetUndo(netsnmp_mib_handler&, netsnmp_handler_registration&,
    netsnmp_agent_request_info&, netsnmp_request_info&);
int SetCommit(netsnmp_mib_handler&, netsnmp_handler_registration&,
    netsnmp_agent_request_info&, netsnmp_request_info&);

static pair<int, SnmpOperationHandler> handlerPairs[] =
{
    make_pair(MODE_GET, Get),
    make_pair(MODE_SET_RESERVE1, SetReserve1),
    make_pair(MODE_SET_RESERVE2, SetReserve2),
    make_pair(MODE_SET_FREE, SetFree),
    make_pair(MODE_SET_ACTION, SetAction),
    make_pair(MODE_SET_UNDO, SetUndo),
    make_pair(MODE_SET_COMMIT, SetCommit)
};
map<int, SnmpOperationHandler> snmpHandler(handlerPairs, handlerPairs + 7);

typedef void (*SnmpGetHandler)(netsnmp_request_info&, InterfaceInfo&);

void GetIfIndex(netsnmp_request_info& request, InterfaceInfo& intf);
void GetIfDescr(netsnmp_request_info& request, InterfaceInfo& intf);
void GetIfType(netsnmp_request_info& request, InterfaceInfo& intf);
void GetIfMtu(netsnmp_request_info& request, InterfaceInfo& intf);
void GetIfSpeed(netsnmp_request_info& request, InterfaceInfo& intf);
void GetIfPhysAddress(netsnmp_request_info& request, InterfaceInfo& intf);
void GetIfAdminStatus(netsnmp_request_info& request, InterfaceInfo& intf);
void GetIfOperStatus(netsnmp_request_info& request, InterfaceInfo& intf);
void GetIfLastChange(netsnmp_request_info& request, InterfaceInfo& intf);
void GetIfInOctets(netsnmp_request_info& request, InterfaceInfo& intf);
void GetIfInUcastPkts(netsnmp_request_info& request, InterfaceInfo& intf);
void GetIfInNUcastPkts(netsnmp_request_info& request, InterfaceInfo& intf);
void GetIfInDiscards(netsnmp_request_info& request, InterfaceInfo& intf);
void GetIfInErrors(netsnmp_request_info& request, InterfaceInfo& intf);
void GetIfInUnknownProtos(netsnmp_request_info& request, InterfaceInfo& intf);
void GetIfOutOctets(netsnmp_request_info& request, InterfaceInfo& intf);
void GetIfOutUcastpkts(netsnmp_request_info& request, InterfaceInfo& intf);
void GetIfOutNUcastPkts(netsnmp_request_info& request, InterfaceInfo& intf);
void GetIfOutDiscards(netsnmp_request_info& request, InterfaceInfo& intf);
void GetIfOutErrors(netsnmp_request_info& request, InterfaceInfo& intf);
void GetIfOutQLen(netsnmp_request_info& request, InterfaceInfo& intf);
void GetIfSpecific(netsnmp_request_info& request, InterfaceInfo& intf);

static pair<int, SnmpGetHandler> getHandlerPairs[] =
{
    make_pair(ColumnIfIndex, GetIfIndex),
    make_pair(ColumnIfDescr, GetIfDescr),
    make_pair(ColumnIfType, GetIfType),
    make_pair(ColumnIfMtu, GetIfMtu),
    make_pair(ColumnIfSpeed, GetIfSpeed),
    make_pair(ColumnIfPhysAddress, GetIfPhysAddress),
    make_pair(ColumnIfAdminStatus, GetIfAdminStatus),
    make_pair(ColumnIfOperStatus, GetIfOperStatus),
    make_pair(ColumnIfLastChange, GetIfLastChange),
    make_pair(ColumnIfInOctets, GetIfInOctets),
    make_pair(ColumnIfInUcastPkts, GetIfInUcastPkts),
    make_pair(ColumnIfInNUcastPkts, GetIfInNUcastPkts),
    make_pair(ColumnIfInDiscards, GetIfInDiscards),
    make_pair(ColumnIfInErrors, GetIfInErrors),
    make_pair(ColumnIfInUnknownProtos, GetIfInUnknownProtos),
    make_pair(ColumnIfOutOctets, GetIfOutOctets),
    make_pair(ColumnIfOutUcastpkts, GetIfOutUcastpkts),
    make_pair(ColumnIfOutNUcastPkts, GetIfOutNUcastPkts),
    make_pair(ColumnIfOutDiscards, GetIfOutDiscards),
    make_pair(ColumnIfOutErrors, GetIfOutErrors),
    make_pair(ColumnIfOutQLen, GetIfOutQLen),
    make_pair(ColumnIfSpecific, GetIfSpecific)
};
map<int, SnmpGetHandler> snmpGetValueHandler(getHandlerPairs,
                                             getHandlerPairs+ColumnIfSpecific);

/** Initializes the system module */
void InitIfTable(void)
{
    const oid    tableOid[] = {1,3,6,1,2,1,2,2};
    const size_t oidLen   = OID_LENGTH(tableOid);
    netsnmp_handler_registration    *reg;

    reg = netsnmp_create_handler_registration("ifTable", SnmpNodeHandler,
              tableOid, oidLen, HANDLER_CAN_RWRITE);

    netsnmp_table_registration_info *tableInfo;
    tableInfo = SNMP_MALLOC_TYPEDEF(netsnmp_table_registration_info);
    netsnmp_table_helper_add_indexes(tableInfo, ASN_INTEGER, 0);
    tableInfo->min_column = ColumnIfIndex;
    tableInfo->max_column = ColumnIfSpecific;

    netsnmp_iterator_info       *iinfo;
    iinfo = SNMP_MALLOC_TYPEDEF(netsnmp_iterator_info);
    iinfo->get_first_data_point = GetFirst;
    iinfo->get_next_data_point  = GetNext;
    iinfo->table_reginfo        = tableInfo;

    netsnmp_register_table_iterator( reg, iinfo );
}

list<InterfaceInfo> intfs;

netsnmp_variable_list* GetFirst(void **loopContext,
    void **dataContext,
    netsnmp_variable_list *indexData,
    netsnmp_iterator_info *data)
{
    InterfaceInfo intf;
    static time_t lastTime;
    time_t nowTime;
    time(&nowTime);
    if (difftime(nowTime , lastTime) > 2.0)
    {
        lastTime = nowTime;
        intfs.clear();
        BASE_ErrCode errCode;
        for (errCode = GetFirstInterface(&intf);
            errCode == BASE_OK;
            errCode = GetNextInterface(intf.ifIndex, &intf))
        {
            intfs.push_back(intf);
        }
    }

    if (intfs.begin() != intfs.end())
    {
        list<InterfaceInfo>::iterator iter;
        iter = intfs.begin();
        snmp_set_var_value(indexData, &iter->ifIndex, sizeof(int32_t));
        *loopContext = *dataContext = (void*)iter->ifIndex;
        return indexData;
    }

    *loopContext = *dataContext = NULL;
    return NULL;
}

netsnmp_variable_list* GetNext(void **loopContext,
    void **dataContext,
    netsnmp_variable_list *indexData,
    netsnmp_iterator_info *data)
{
    list<InterfaceInfo>::iterator iter;
    int32_t ifIndex = (int32_t)*loopContext;
    for (iter = intfs.begin(); iter != intfs.end(); ++iter)
    {
        if (iter->ifIndex == ifIndex)
        {
            iter++;
            break;
        }
    }

    if (iter != intfs.end())
    {
        snmp_set_var_value(indexData, &iter->ifIndex, sizeof(int32_t));
        *loopContext = *dataContext = (void*)iter->ifIndex;
        return indexData;
    }

    *loopContext = *dataContext = NULL;
    return NULL;
}

void GetIfIndex(netsnmp_request_info& request, InterfaceInfo& intf)
{
    snmp_set_var_typed_integer(request.requestvb, ASN_INTEGER, intf.ifIndex);
}

void GetIfDescr(netsnmp_request_info& request, InterfaceInfo& intf)
{
    snmp_set_var_typed_value(request.requestvb, ASN_OCTET_STR,
        intf.ifDescr, strlen(intf.ifDescr));
}

void GetIfType(netsnmp_request_info& request, InterfaceInfo& intf)
{
    snmp_set_var_typed_integer(request.requestvb, ASN_INTEGER, intf.ifType);
}

void GetIfMtu(netsnmp_request_info& request, InterfaceInfo& intf)
{
    snmp_set_var_typed_integer(request.requestvb, ASN_INTEGER, intf.ifMtu);
}

void GetIfSpeed(netsnmp_request_info& request, InterfaceInfo& intf)
{
    snmp_set_var_typed_integer(request.requestvb, ASN_INTEGER, intf.ifSpeed);
}

void GetIfPhysAddress(netsnmp_request_info& request, InterfaceInfo& intf)
{
    snmp_set_var_typed_value(request.requestvb, ASN_OCTET_STR,
        intf.ifPhysAddress, 6);
}

void GetIfAdminStatus(netsnmp_request_info& request, InterfaceInfo& intf)
{
    snmp_set_var_typed_integer(request.requestvb, ASN_INTEGER, intf.ifAdminStatus);
}

void GetIfOperStatus(netsnmp_request_info& request, InterfaceInfo& intf)
{
    snmp_set_var_typed_integer(request.requestvb, ASN_INTEGER, intf.ifOperStatus);
}

void GetIfLastChange(netsnmp_request_info& request, InterfaceInfo& intf)
{
    snmp_set_var_typed_integer(request.requestvb, ASN_TIMETICKS, intf.ifLastChange);
}
/*******************counter ***********/
void GetIfInOctets(netsnmp_request_info& request, InterfaceInfo& intf)
{
    snmp_set_var_typed_integer(request.requestvb, ASN_INTEGER, intf.ifInOctets);
}

void GetIfInUcastPkts(netsnmp_request_info& request, InterfaceInfo& intf)
{
    snmp_set_var_typed_integer(request.requestvb, ASN_INTEGER, intf.ifInUcastPkts);
}

void GetIfInNUcastPkts(netsnmp_request_info& request, InterfaceInfo& intf)
{
    snmp_set_var_typed_integer(request.requestvb, ASN_INTEGER, intf.ifInNUcastPkts);
}

void GetIfInDiscards(netsnmp_request_info& request, InterfaceInfo& intf)
{
    snmp_set_var_typed_integer(request.requestvb, ASN_INTEGER, intf.ifInDiscards);
}

void GetIfInErrors(netsnmp_request_info& request, InterfaceInfo& intf)
{
    snmp_set_var_typed_integer(request.requestvb, ASN_INTEGER, intf.ifInErrors);
}

void GetIfInUnknownProtos(netsnmp_request_info& request, InterfaceInfo& intf)
{
    snmp_set_var_typed_integer(request.requestvb, ASN_INTEGER, intf.ifInUnknownProtos);
}

void GetIfOutOctets(netsnmp_request_info& request, InterfaceInfo& intf)
{
    snmp_set_var_typed_integer(request.requestvb, ASN_INTEGER, intf.ifOutOctets);
}

void GetIfOutUcastpkts(netsnmp_request_info& request, InterfaceInfo& intf)
{
    snmp_set_var_typed_integer(request.requestvb, ASN_INTEGER, intf.ifOutUcastPkts);
}

void GetIfOutNUcastPkts(netsnmp_request_info& request, InterfaceInfo& intf)
{
    snmp_set_var_typed_integer(request.requestvb, ASN_INTEGER, intf.ifOutNUcastPkts);
}

void GetIfOutDiscards(netsnmp_request_info& request, InterfaceInfo& intf)
{
    snmp_set_var_typed_integer(request.requestvb, ASN_INTEGER, intf.ifOutDiscards);
}

void GetIfOutErrors(netsnmp_request_info& request, InterfaceInfo& intf)
{
    snmp_set_var_typed_integer(request.requestvb, ASN_INTEGER, intf.ifOutErrors);
}

void GetIfOutQLen(netsnmp_request_info& request, InterfaceInfo& intf)
{
    snmp_set_var_typed_integer(request.requestvb, ASN_INTEGER, intf.ifOutQLen);
}

void GetIfSpecific(netsnmp_request_info& request, InterfaceInfo&)
{
    oid value[2] = {0, 0};
    snmp_set_var_typed_value(request.requestvb, ASN_OBJECT_ID, value, sizeof(value));
}

int Get(netsnmp_mib_handler& handler, netsnmp_handler_registration& regInfo,
    netsnmp_agent_request_info& reqInfo, netsnmp_request_info& requests)
{
    netsnmp_request_info *request;
    netsnmp_table_request_info *tableInfo;
    list<InterfaceInfo>::iterator intf;

    dbgstrm << "Start." << endl;
    for (request = &requests; request != NULL; request = request->next)
    {
        int32_t ifIndex = (int32_t) netsnmp_extract_iterator_context(request);
        for (intf = intfs.begin(); intf != intfs.end(); ++intf)
        {
            if (intf->ifIndex == ifIndex)
                break;
        }

        if (intf == intfs.end())
        {
            dbgstrm << "invalid index" << endl;
            netsnmp_set_request_error(&reqInfo, request, SNMP_NOSUCHINSTANCE);
            continue;
        }

        tableInfo = netsnmp_extract_table_info(request);
        map<int, SnmpGetHandler>::iterator iter;
        iter = snmpGetValueHandler.find(tableInfo->colnum);
        if (iter != snmpGetValueHandler.end())
        {
            iter->second(*request, *intf);
        }
        else
        {
            dbgstrm << "Error, wrong table column number";
            netsnmp_set_request_error(&reqInfo, request, SNMP_NOSUCHOBJECT);
        }
    }

    return SNMP_ERR_NOERROR;
}

int SetReserve1(netsnmp_mib_handler& handler, netsnmp_handler_registration& regInfo,
    netsnmp_agent_request_info& reqInfo, netsnmp_request_info& requests)
{
    return SNMP_ERR_NOERROR;
}

int SetReserve2(netsnmp_mib_handler& handler, netsnmp_handler_registration& regInfo,
    netsnmp_agent_request_info& reqInfo, netsnmp_request_info& requests)
{
    return SNMP_ERR_NOERROR;
}

int SetFree(netsnmp_mib_handler& handler, netsnmp_handler_registration& regInfo,
    netsnmp_agent_request_info& reqInfo, netsnmp_request_info& requests)
{
    return SNMP_ERR_NOERROR;
}

int SetAction(netsnmp_mib_handler& handler, netsnmp_handler_registration& regInfo,
    netsnmp_agent_request_info& reqInfo, netsnmp_request_info& requests)
{
    return SNMP_ERR_NOERROR;
}

int SetUndo(netsnmp_mib_handler& handler, netsnmp_handler_registration& regInfo,
    netsnmp_agent_request_info& reqInfo, netsnmp_request_info& requests)
{
    return SNMP_ERR_NOERROR;
}

int SetCommit(netsnmp_mib_handler& handler, netsnmp_handler_registration& regInfo,
    netsnmp_agent_request_info& reqInfo, netsnmp_request_info& requests)
{
    return SNMP_ERR_NOERROR;
}

/** handles requests for the gsCableDocsServiceFlowCfgTable table */
int SnmpNodeHandler(netsnmp_mib_handler *handler,
    netsnmp_handler_registration *regInfo,
    netsnmp_agent_request_info *reqInfo,
    netsnmp_request_info *requests)
{
    map<int, SnmpOperationHandler>::iterator iter;
    iter = snmpHandler.find(reqInfo->mode);
    assert(iter != snmpHandler.end());
    iter->second(*handler, *regInfo, *reqInfo, *requests);

    return SNMP_ERR_NOERROR;
}

CxxEndNameSpace /* Interfaces */
CxxEndNameSpace /* Snmp */
