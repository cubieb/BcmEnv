/*
 * Note: this file originally auto-generated by mib2c using
 *  $
 */
#include "SystemInclude.h"
#include "BcmController.h"

#include <net-snmp/net-snmp-config.h>
#include <net-snmp/net-snmp-includes.h>
#include <net-snmp/agent/net-snmp-agent-includes.h>

#include "Debug.h"
#include "Util.h"
#include "gsAnCmcCmCpeTable.h"

#include "CnuStatusMgt.h"
#include "CnuHostStatusMgt.h"
using namespace std;

struct CmCpeInfor
{
    int32_t cmIndex;
    int32_t cpeIndex;
    MacAddressT cmMac;
    MacAddressT cpeMac;
    int32_t cpeIpType;
};
static list<CmCpeInfor> cmCpeList;

typedef int(*SnmpOperationHandler)(netsnmp_mib_handler*,
    netsnmp_handler_registration*,
    netsnmp_agent_request_info*,
    netsnmp_request_info*);

typedef void(*SnmpSetValueToPktHandler)(netsnmp_agent_request_info*,
    netsnmp_request_info*,  int32_t);

static map<int, SnmpOperationHandler> snmpHandler;
static map<int, SnmpSetValueToPktHandler>  snmpSetValueHandler;

int GsAnCmcCmCpeGet(netsnmp_mib_handler *handler,
    netsnmp_handler_registration *reginfo,
    netsnmp_agent_request_info *reqInfo,
    netsnmp_request_info *requests);

void SnmpSetValueToReqestCmIndex(netsnmp_agent_request_info *reqInfo,
    netsnmp_request_info *request, int32_t index);
void SnmpSetValueToReqestCpeIndex(netsnmp_agent_request_info *reqInfo,
    netsnmp_request_info *request, int32_t index);
void SnmpSetValueToReqestCmMacAddr(netsnmp_agent_request_info *reqInfo,
    netsnmp_request_info *request, int32_t index);
void SnmpSetValueToReqestCpeMacAddr(netsnmp_agent_request_info *reqInfo,
    netsnmp_request_info *request, int32_t index);
void SnmpSetValueToReqestCpeIpAddrType(netsnmp_agent_request_info *reqInfo,
    netsnmp_request_info *request, int32_t index);
void SnmpSetValueToReqestCpeIpAddr(netsnmp_agent_request_info *reqInfo,
    netsnmp_request_info *request, int32_t index);
void SnmpSetValueToReqestCpeType(netsnmp_agent_request_info *reqInfo,
    netsnmp_request_info *request, int32_t index);

/** Initializes the gsAnCmcCmCpeTable module */
void InitGsAnCmcCmCpeTable(void)
{
    const oid tableOid[] = {1, 3, 6, 1, 4, 1, 22764, 1015, 9026, 2, 1, 3};

    netsnmp_handler_registration *reg;
    reg = netsnmp_create_handler_registration("gsAnCmcCmCpeTable", GsAnCmcCmCpeHandler,
        tableOid, OID_LENGTH(tableOid), HANDLER_CAN_RONLY);

    netsnmp_table_registration_info *tableInfo;
    tableInfo = SNMP_MALLOC_TYPEDEF(netsnmp_table_registration_info);
    netsnmp_table_helper_add_indexes(tableInfo,
        ASN_INTEGER, /* index: gsAnCmcCmIndex */
        ASN_INTEGER, /* index: gsAnCmcCmCpeIndex */
        0);
    tableInfo->min_column = ColumnCmMacAddr;//ColumnCmIndex;
    tableInfo->max_column = ColumnCpeType;

    netsnmp_iterator_info *iter;
    iter = SNMP_MALLOC_TYPEDEF(netsnmp_iterator_info);
    iter->get_first_data_point = GsAnCmcCmCpeGetFirst;
    iter->get_next_data_point = GsAnCmcCmCpeGetNext;
    iter->table_reginfo = tableInfo;

    netsnmp_register_table_iterator(reg, iter);

    snmpHandler.insert(make_pair(MODE_GET, GsAnCmcCmCpeGet));

    snmpSetValueHandler.insert(make_pair(ColumnCmIndex, SnmpSetValueToReqestCmIndex));
    snmpSetValueHandler.insert(make_pair(ColumnCpeIndex, SnmpSetValueToReqestCpeIndex));
    snmpSetValueHandler.insert(make_pair(ColumnCmMacAddr, SnmpSetValueToReqestCmMacAddr));
    snmpSetValueHandler.insert(make_pair(ColumnCpeMacAddr, SnmpSetValueToReqestCpeMacAddr));
    snmpSetValueHandler.insert(make_pair(ColumnCpeIpAddrType, SnmpSetValueToReqestCpeIpAddrType));
    snmpSetValueHandler.insert(make_pair(ColumnCpeIpAddr, SnmpSetValueToReqestCpeIpAddr));
    snmpSetValueHandler.insert(make_pair(ColumnCpeType, SnmpSetValueToReqestCpeType));
}

static int32_t MakeSnmpTableIndex(int32_t cmIndex, int32_t cpeIndex)
{
    return cmIndex * 1000 + cpeIndex;
}

static int32_t GetSnmpCmIndex(int32_t tableIndex)
{
    return tableIndex / 1000;
}

static int32_t GetSnmpCpeIndex(int32_t tableIndex)
{
    return tableIndex % 1000;
}

netsnmp_variable_list *GsAnCmcCmCpeGetFirst(void **loopContext,
    void **dataContext,
    netsnmp_variable_list *indexData,
    netsnmp_iterator_info *data)
{  
    BASE_ErrCode errCode1, errCode2;
    netsnmp_variable_list* retVarList = NULL;

    dbgstrm << "Start." << endl;
    *loopContext = NULL;
    *dataContext = NULL;
    cmCpeList.clear();

    CMCOAM_CnuStatusT cm;
    CMCOAM_CmHostInfoT cpe;
    bool isFirst = true;
    for (errCode1 = GetFirstCMInfoMgt(&cm);
        errCode1 == BASE_OK;
        errCode1 = GetNextCMInfoMgt(&cm, &cm))
    {
        int32_t cpeIndex = 1;
        for (errCode2 = GetFirst_Cm_HostMgt(&cm, &cpe);
            errCode2 == BASE_OK;
            errCode2 = GetNext_Cm_HostMgt(&cm, &cpe, &cpe))
        {
            //fill cm and cpe data into local list<>
            CmCpeInfor cmCpeInfo;
            cmCpeInfo.cmIndex = (int32_t)cm.cnu_index;
            cmCpeInfo.cpeIndex = cpeIndex++;
            CopyMacAddr(cmCpeInfo.cmMac.addr, cm.cnu_mac);
            CopyMacAddr(cmCpeInfo.cpeMac.addr, cpe.host_mac.addr);
            cmCpeList.push_back(cmCpeInfo);

            if (isFirst)
            {
                snmp_set_var_value(indexData, &cmCpeInfo.cmIndex, sizeof(int32_t));
                snmp_set_var_value(indexData->next_variable,
                    &cmCpeInfo.cpeIndex, sizeof(int32_t));

                *loopContext = (void*)MakeSnmpTableIndex(cmCpeInfo.cmIndex, cmCpeInfo.cpeIndex);
                *dataContext = *loopContext;
                retVarList = indexData;//set the first table index only.
            }
            isFirst = false;
        }
    }

    return retVarList;
}

netsnmp_variable_list* GsAnCmcCmCpeGetNext(void **loopContext,
    void **dataContext,
    netsnmp_variable_list *indexData,
    netsnmp_iterator_info *data)
{
    int32_t cmIndex, cpeIndex;
    netsnmp_variable_list* retVarList = NULL;

    dbgstrm << "Start." << endl;
    cmIndex = GetSnmpCmIndex((int32_t)(*loopContext));
    cpeIndex = GetSnmpCpeIndex((int32_t)(*loopContext));

    //according local list<> to set other table index
    list<CmCpeInfor>::iterator iter;
    for (iter = cmCpeList.begin(); iter != cmCpeList.end(); ++iter)
    {
        if (iter->cmIndex == cmIndex && iter->cpeIndex == cpeIndex)
        {
            break;
        }
    }

    if (iter != cmCpeList.end())
    {
        ++iter;
        if (iter != cmCpeList.end())
        {
            snmp_set_var_value(indexData, &iter->cmIndex, sizeof(int32_t));
            snmp_set_var_value(indexData->next_variable,
                &iter->cpeIndex, sizeof(int32_t));

            *loopContext = (void*)MakeSnmpTableIndex(iter->cmIndex, iter->cpeIndex);
            *dataContext = *loopContext;
            retVarList = indexData;
        }
    }

    return retVarList;
}

static BASE_ErrCode FindCmCpeInfor(list<CmCpeInfor>& cmCpeList, int32_t cmIndex,
    int32_t cpeIndex, CmCpeInfor **cache, CMCOAM_CmHostInfoT *cmHostP)
{
    list<CmCpeInfor>::iterator iter;
    for (iter = cmCpeList.begin(); iter != cmCpeList.end(); ++iter)
    {
        if (cmIndex == iter->cmIndex && cpeIndex == iter->cpeIndex)
        {
            *cache = &(*iter);
            return Find_Cm_HostMgt(iter->cmMac, iter->cpeMac, cmHostP);
        }

    }

    return BASE_ERROR;
}

void SnmpSetValueToReqestCmIndex(netsnmp_agent_request_info *reqInfo,
    netsnmp_request_info *request, int32_t index)
{
    dbgstrm << "Start, index = " << index << endl;
    int32_t cmIndex = GetSnmpCmIndex(index);
    snmp_set_var_typed_value(request->requestvb, ASN_INTEGER,
                             &cmIndex, sizeof(int32_t));
}

void SnmpSetValueToReqestCpeIndex(netsnmp_agent_request_info *reqInfo,
    netsnmp_request_info *request, int32_t index)
{
    int32_t cpeIndex = GetSnmpCpeIndex(index);
    snmp_set_var_typed_value(request->requestvb, ASN_INTEGER,
                             &cpeIndex, sizeof(int32_t));
}

void SnmpSetValueToReqestCmMacAddr(netsnmp_agent_request_info *reqInfo,
    netsnmp_request_info *request, int32_t index)
{
    int32_t cmIndex = GetSnmpCmIndex(index);
    int32_t cpeIndex = GetSnmpCpeIndex(index);

    CmCpeInfor *cmCpeInfoP;
    CMCOAM_CmHostInfoT cmHost;
    BASE_ErrCode errCode = FindCmCpeInfor(cmCpeList, cmIndex, cpeIndex, &cmCpeInfoP, &cmHost);
    if (errCode != BASE_OK || cpeIndex == 0)
    {
        netsnmp_set_request_error(reqInfo, request, SNMP_NOSUCHINSTANCE);
        return;
    }

    snmp_set_var_typed_value(request->requestvb, ASN_OCTET_STR, cmCpeInfoP->cmMac.addr, 6);
}

void SnmpSetValueToReqestCpeMacAddr(netsnmp_agent_request_info *reqInfo,
    netsnmp_request_info *request, int32_t index)
{
    int32_t cmIndex = GetSnmpCmIndex(index);
    int32_t cpeIndex = GetSnmpCpeIndex(index);

    CmCpeInfor *cmCpeInfoP;
    CMCOAM_CmHostInfoT cmHost;
    BASE_ErrCode errCode = FindCmCpeInfor(cmCpeList, cmIndex, cpeIndex, &cmCpeInfoP, &cmHost);
    if (errCode != BASE_OK || cpeIndex == 0)
    {
        netsnmp_set_request_error(reqInfo, request, SNMP_NOSUCHINSTANCE);
        return;
    }

    snmp_set_var_typed_value(request->requestvb, ASN_OCTET_STR, cmCpeInfoP->cpeMac.addr, 6);
}

void SnmpSetValueToReqestCpeIpAddrType(netsnmp_agent_request_info *reqInfo,
    netsnmp_request_info *request, int32_t index)
{
    dbgstrm << "Start, index = " << index << endl;
    int32_t IpAddrType = 0;
    snmp_set_var_typed_value(request->requestvb, ASN_INTEGER, &IpAddrType, sizeof(int32_t));
}

void SnmpSetValueToReqestCpeIpAddr(netsnmp_agent_request_info *reqInfo,
    netsnmp_request_info *request, int32_t index)
{
    int32_t cmIndex = GetSnmpCmIndex(index);
    int32_t cpeIndex = GetSnmpCpeIndex(index);

    CmCpeInfor *cmCpeInfoP;
    CMCOAM_CmHostInfoT cmHost;
    BASE_ErrCode errCode = FindCmCpeInfor(cmCpeList, cmIndex, cpeIndex, &cmCpeInfoP, &cmHost);
    if (errCode != BASE_OK || cpeIndex == 0)
    {
        netsnmp_set_request_error(reqInfo, request, SNMP_NOSUCHINSTANCE);
        return;
    }

    snmp_set_var_typed_value(request->requestvb, ASN_OCTET_STR, &cmHost.ipv4_addr, 
            sizeof(cmHost.ipv4_addr));
}

void SnmpSetValueToReqestCpeType(netsnmp_agent_request_info *reqInfo,
    netsnmp_request_info *request, int32_t index)
{
    int32_t cmIndex = GetSnmpCmIndex(index);
    int32_t cpeIndex = GetSnmpCpeIndex(index);

    CmCpeInfor *cmCpeInfoP;
    CMCOAM_CmHostInfoT cmHost;
    BASE_ErrCode errCode = FindCmCpeInfor(cmCpeList, cmIndex, cpeIndex, &cmCpeInfoP, &cmHost);
    if (errCode != BASE_OK || cpeIndex == 0)
    {
        netsnmp_set_request_error(reqInfo, request, SNMP_NOSUCHINSTANCE);
        return;
    }

    snmp_set_var_typed_integer( request->requestvb, ASN_INTEGER, cmHost.cpe_type );
}

int GsAnCmcCmCpeGet(netsnmp_mib_handler *handler,
    netsnmp_handler_registration *reginfo,
    netsnmp_agent_request_info *reqInfo,
    netsnmp_request_info *requests)
{
    netsnmp_request_info       *request;
    netsnmp_table_request_info *tableInfo;

    dbgstrm << "Start." << endl;
    for (request=requests; request; request=request->next)
    {
        int32_t index = (int32_t)netsnmp_extract_iterator_context(request);
        dbgstrm << "index = " << index << endl;

        if ((void *)index == NULL)
        {
            dbgstrm << "entry is NULL" << endl;
            netsnmp_set_request_error(reqInfo, request, SNMP_NOSUCHINSTANCE);
            continue;
        }
        tableInfo  = netsnmp_extract_table_info(request);

        map<int, SnmpSetValueToPktHandler>::iterator iter;
        iter = snmpSetValueHandler.find(tableInfo->colnum);
        dbgstrm << "tableInfo->colnum= " << tableInfo->colnum << endl;
        
        if(iter != snmpSetValueHandler.end())
        {
            iter->second(reqInfo, requests, index);
        }
        else
        {
            dbgstrm << "Error, wrong table column number";
            netsnmp_set_request_error(reqInfo, request, SNMP_NOSUCHINSTANCE);
        }
    }

    return SNMP_ERR_NOERROR;
}

/** handles requests for the gsAnCmcCmCpeTable table */
int GsAnCmcCmCpeHandler(netsnmp_mib_handler *handler,
    netsnmp_handler_registration *reginfo,
    netsnmp_agent_request_info *reqinfo,
    netsnmp_request_info *requests)
{
    map<int, SnmpOperationHandler>::iterator iter;
    iter = snmpHandler.find(reqinfo->mode);
    assert(iter != snmpHandler.end());
    iter->second(handler, reginfo, reqinfo, requests);
    return SNMP_ERR_NOERROR;
}



