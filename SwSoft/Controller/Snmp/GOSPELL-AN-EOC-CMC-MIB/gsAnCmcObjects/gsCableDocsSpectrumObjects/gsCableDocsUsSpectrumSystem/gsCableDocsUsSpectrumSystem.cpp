/*
 * Note: this file originally auto-generated by mib2c using
 *        $
 */

#include "SystemInclude.h"
#include "BcmController.h"

#include <net-snmp/net-snmp-config.h>
#include <net-snmp/net-snmp-includes.h>
#include <net-snmp/agent/net-snmp-agent-includes.h>

#include "Debug.h"
#include "LoadBalanceMgt.h"

#include "gsCableDocsUsSpectrumSystem.h"
using namespace std;

/** Initializes the gsCableDocsUsSpectrumSystem module */
void InitGsCableDocsUsSpectrumSystem(void)
{
    const oid Oid[] = { 1,3,6,1,4,1,22764,1015,9026,2,3,1,1 };

    DEBUGMSGTL(("gsCableDocsUsSpectrumSystem", "Initializing\n"));

    netsnmp_register_scalar(
        netsnmp_create_handler_registration("gsCableDocsUsSpectrumFFTAveraging", 
                                HandleGsCableDocsUsSpectrumFFTAveraging,
                               Oid, OID_LENGTH(Oid),
                               HANDLER_CAN_RWRITE
        ));
}

int
HandleGsCableDocsUsSpectrumFFTAveraging(netsnmp_mib_handler *handler,
                          netsnmp_handler_registration *reginfo,
                          netsnmp_agent_request_info   *reqinfo,
                          netsnmp_request_info         *requests)
{
    int ret;
    U8 method;
    BASE_ErrCode ErrCode;
    CMCOAM_GetLdBlcDynCfgRspT dynLdBlcCfg;
    
    switch(reqinfo->mode) 
    {

        case MODE_GET:
            ErrCode = GetDynamicLoadBalanceConfig(&dynLdBlcCfg);
            if (ErrCode != BASE_OK)
            {
                netsnmp_set_request_error(reqinfo, requests, SNMP_ERR_GENERR);
            }            
            
            snmp_set_var_typed_value(requests->requestvb, ASN_INTEGER,
                                     &dynLdBlcCfg.method, sizeof(U8));
            break;

        case MODE_SET_RESERVE1:

            ret = netsnmp_check_vb_type(requests->requestvb, ASN_INTEGER);
            if ( ret != SNMP_ERR_NOERROR ) {
                netsnmp_set_request_error(reqinfo, requests, ret );
            }
            break;

        case MODE_SET_RESERVE2:
            break;

        case MODE_SET_FREE:
            break;

        case MODE_SET_ACTION:
            method = *requests->requestvb->val.integer ;
            ErrCode = SetDynamicLoadBalanceMethod(&method);
            if (ErrCode != BASE_OK)
            {
                netsnmp_set_request_error(reqinfo, requests, SNMP_ERR_GENERR);
            }  
            break;

        case MODE_SET_COMMIT:
            break;

        case MODE_SET_UNDO:
            break;

        default:
            /* we should never get here, so this is a really bad error */
            snmp_log(LOG_ERR, "unknown mode (%d) in handle_gsCableDocsUsSpectrumFFTAveraging\n", 
                                reqinfo->mode );
            return SNMP_ERR_GENERR;
    }

    return SNMP_ERR_NOERROR;
}
