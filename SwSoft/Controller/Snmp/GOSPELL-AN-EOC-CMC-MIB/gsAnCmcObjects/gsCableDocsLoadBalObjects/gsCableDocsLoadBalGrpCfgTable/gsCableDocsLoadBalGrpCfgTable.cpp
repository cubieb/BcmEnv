/*
 * Note: this file originally auto-generated by mib2c using
 *  : mib2c.iterate.conf 17695 2009-07-21 12:22:18Z dts12 $
 */
#include "SystemInclude.h"
#include "BcmController.h"

#include <net-snmp/net-snmp-config.h>
#include <net-snmp/net-snmp-includes.h>
#include <net-snmp/agent/net-snmp-agent-includes.h>

#include "Debug.h"
#include "LoadBalanceMgt.h"
#include "gsCableDocsLoadBalGrpCfgTable.h"
using namespace std;

typedef int(*SnmpOperationHandler)(netsnmp_mib_handler*,
                                   netsnmp_handler_registration*,
                                   netsnmp_agent_request_info*,
                                   netsnmp_request_info*);

static int DocsLoadBalGrpCfgGet(netsnmp_mib_handler*, netsnmp_handler_registration*,
                                netsnmp_agent_request_info*, netsnmp_request_info*);
static int DocsLoadBalGrpCfgSetReserve1(netsnmp_mib_handler*,
                                        netsnmp_handler_registration*,
                                        netsnmp_agent_request_info*,
                                        netsnmp_request_info*);
static int DocsLoadBalGrpCfgSetReserve2(netsnmp_mib_handler*,
                                        netsnmp_handler_registration*,
                                        netsnmp_agent_request_info*,
                                        netsnmp_request_info*);
static int DocsLoadBalGrpCfgSetFree(netsnmp_mib_handler*,
                                    netsnmp_handler_registration*,
                                    netsnmp_agent_request_info*,
                                    netsnmp_request_info*);
static int DocsLoadBalGrpCfgSetAction(netsnmp_mib_handler*,
                                      netsnmp_handler_registration*,
                                      netsnmp_agent_request_info*,
                                      netsnmp_request_info*);
static int DocsLoadBalGrpCfgSetUndo(netsnmp_mib_handler*,
                                    netsnmp_handler_registration*,
                                    netsnmp_agent_request_info*,
                                    netsnmp_request_info*);
static int DocsLoadBalGrpCfgSetCommit(netsnmp_mib_handler*,
                                      netsnmp_handler_registration*,
                                      netsnmp_agent_request_info*,
                                      netsnmp_request_info*);

typedef void(*SnmpSetValueToPktHandler)(netsnmp_agent_request_info*,
                                        netsnmp_request_info*,
                                        int32_t);

static void SnmpSetValueToReqestId(netsnmp_agent_request_info *reqInfo,
                                   netsnmp_request_info       *request,
                                   int32_t                    id);
static void SnmpSetValueToReqestType(netsnmp_agent_request_info *reqInfo,
                                     netsnmp_request_info       *request,
                                     int32_t                    id);
static void SnmpSetValueToReqestDsChList(netsnmp_agent_request_info *reqInfo,
                                         netsnmp_request_info       *request,
                                         int32_t                    id);
static void SnmpSetValueToReqestUsChList(netsnmp_agent_request_info *reqInfo,
                                         netsnmp_request_info       *request,
                                         int32_t                    id);
static void SnmpSetValueToReqestActiveMacAddr(netsnmp_agent_request_info *reqInfo,
                                              netsnmp_request_info       *request,
                                              int32_t                    id);
static void SnmpSetValueToReqestOption(netsnmp_agent_request_info *reqInfo,
                                       netsnmp_request_info       *request,
                                       int32_t                    id);

static map<int, SnmpOperationHandler> snmpHandler;
static map<int, SnmpSetValueToPktHandler>  snmpSetValueHandler;

/** Initializes the docsIfDownstreamChannelTable module */
void InitDocsLoadBalGrpCfgTable(void)
{
  /* here we initialize all the tables we're planning on supporting */
    const oid    tableOid[] = {1,3,6,1,4,1,22764,1015,9026,2,4,2};
    const size_t oidLen     = OID_LENGTH(tableOid);
    netsnmp_handler_registration    *reg;
    netsnmp_iterator_info           *iinfo;

    reg = netsnmp_create_handler_registration("gsCableDocsLoadBalGrpCfgTable",
                                              DocsLoadBalGrpCfgHandler,
                                              tableOid, oidLen,
                                              HANDLER_CAN_RWRITE);

    netsnmp_table_registration_info *tableInfo;
    tableInfo = SNMP_MALLOC_TYPEDEF( netsnmp_table_registration_info );
    netsnmp_table_helper_add_indexes(tableInfo,
                                     ASN_INTEGER,  /* index: Group Id */
                                     0);
    tableInfo->min_column = ColumnGsCableDocsLoadBalGrpCfgId;
    tableInfo->max_column = ColumnGsCableDocsLoadBalGrpCfgOption;
    
    iinfo = SNMP_MALLOC_TYPEDEF( netsnmp_iterator_info );
    iinfo->get_first_data_point = DocsLoadBalGrpCfgGetFirst;
    iinfo->get_next_data_point  = DocsLoadBalGrpCfgGetNext;
    iinfo->table_reginfo        = tableInfo;

    netsnmp_register_table_iterator( reg, iinfo );

    /* Initialize the contents of the table here */
    snmpHandler.insert(make_pair(MODE_GET, DocsLoadBalGrpCfgGet));
    snmpHandler.insert(make_pair(MODE_SET_RESERVE1, DocsLoadBalGrpCfgSetReserve1));
    snmpHandler.insert(make_pair(MODE_SET_RESERVE2, DocsLoadBalGrpCfgSetReserve2));
    snmpHandler.insert(make_pair(MODE_SET_FREE, DocsLoadBalGrpCfgSetFree));
    snmpHandler.insert(make_pair(MODE_SET_ACTION, DocsLoadBalGrpCfgSetAction));
    snmpHandler.insert(make_pair(MODE_SET_UNDO, DocsLoadBalGrpCfgSetUndo));
    snmpHandler.insert(make_pair(MODE_SET_COMMIT, DocsLoadBalGrpCfgSetCommit));

    snmpSetValueHandler.insert(make_pair(ColumnGsCableDocsLoadBalGrpCfgId, SnmpSetValueToReqestId));
    snmpSetValueHandler.insert(make_pair(ColumnGsCableDocsLoadBalGrpCfgType, SnmpSetValueToReqestType));
    snmpSetValueHandler.insert(make_pair(ColumnGsCableDocsLoadBalGrpCfgDsChList, SnmpSetValueToReqestDsChList));
    snmpSetValueHandler.insert(make_pair(ColumnGsCableDocsLoadBalGrpCfgUsChList, SnmpSetValueToReqestUsChList));
    snmpSetValueHandler.insert(make_pair(ColumnGsCableDocsLoadBalGrpCfgActiveMacAddr, SnmpSetValueToReqestActiveMacAddr));
    snmpSetValueHandler.insert(make_pair(ColumnGsCableDocsLoadBalGrpCfgOption, SnmpSetValueToReqestOption));
}

/* Example iterator hook routines - using 'get_next' to do most of the work */
netsnmp_variable_list* DocsLoadBalGrpCfgGetFirst(void **loopContext,
                                                 void **dataContext,
                                                 netsnmp_variable_list *indexData,
                                                 netsnmp_iterator_info *data)
{
    BASE_ErrCode         errCode;
    LoadBalGrpCfgT grp;

    dbgstrm << "Start." << endl;
    errCode = GetFirstLoadBalanceGrp(&grp, cliGetCmc());
    if (errCode != BASE_OK)
    {
        dbgstrm << "no more group." << endl;
        *dataContext = NULL;
        *loopContext = NULL;
        return NULL;
    }

    dbgstrm << "ok." << endl;
    snmp_set_var_value(indexData, &grp.id, sizeof(int32_t));
    *dataContext = (void *)grp.id;
    *loopContext = (void *)grp.id;

    return indexData;
}

/* The GetNext() function is called by net-snmp library to iterate all table index,
 * terminate loop by return NULL.
 */
netsnmp_variable_list* DocsLoadBalGrpCfgGetNext(void **loopContext,
                                                void **dataContext,
                                                netsnmp_variable_list *indexData,
                                                netsnmp_iterator_info *data)
{
    BASE_ErrCode errCode;
    LoadBalGrpCfgT grp;
    int32_t id = (int32_t)(*loopContext);

    dbgstrm << "Start. id = " << id << endl;

    errCode = GetNextLoadBalanceGrp(id, &grp, cliGetCmc());
    if (errCode != BASE_OK)
    {
        dbgstrm << "no more group." << endl;
        *dataContext = NULL;
        *loopContext = NULL;
        return NULL;
    }

    dbgstrm << "ok." << endl;
    snmp_set_var_value(indexData, &grp.id, sizeof(int32_t));
    *dataContext = (void *)grp.id;
    *loopContext = (void *)grp.id;

    return indexData;
}

void SnmpSetValueToReqestId(netsnmp_agent_request_info *reqInfo,
                            netsnmp_request_info       *request,
                            int32_t                    id)
{
    dbgstrm << "Start, id = " << id << endl;
    snmp_set_var_typed_value(request->requestvb, ASN_INTEGER,
                             &id, sizeof(int32_t));
}

void SnmpSetValueToReqestType(netsnmp_agent_request_info *reqInfo,
                              netsnmp_request_info       *request,
                              int32_t                    id)
{
    LoadBalGrpCfgT grp;
    BASE_ErrCode errCode = FindLoadBalanceGrp(id, &grp, cliGetCmc());
    assert(errCode == BASE_OK);

    snmp_set_var_typed_value(request->requestvb, ASN_INTEGER,
                             &grp.type, sizeof(int32_t));
}

void SnmpSetValueToReqestDsChList(netsnmp_agent_request_info *reqInfo,
                                  netsnmp_request_info       *request,
                                  int32_t                    id)
{
    LoadBalGrpCfgT grp;
    BASE_ErrCode errCode = FindLoadBalanceGrp(id, &grp, cliGetCmc());
    assert(errCode == BASE_OK);

    snmp_set_var_typed_value(request->requestvb, ASN_OCTET_STR,
                             grp.dsChList, grp.dsChNumber);
}

void SnmpSetValueToReqestUsChList(netsnmp_agent_request_info *reqInfo,
                                  netsnmp_request_info       *request,
                                  int32_t                    id)
{
    LoadBalGrpCfgT grp;
    BASE_ErrCode errCode = FindLoadBalanceGrp(id, &grp, cliGetCmc());
    assert(errCode == BASE_OK);

    snmp_set_var_typed_value(request->requestvb, ASN_OCTET_STR,
                             grp.usChList, grp.usChNumber);
}

void SnmpSetValueToReqestActiveMacAddr(netsnmp_agent_request_info *reqInfo,
                                       netsnmp_request_info       *request,
                                       int32_t                    id)
{
    snmp_set_var_typed_value(request->requestvb, ASN_OCTET_STR,
                             NULL, 0);
}

void SnmpSetValueToReqestOption(netsnmp_agent_request_info *reqInfo,
                                netsnmp_request_info       *request,
                                int32_t                    id)
{
    int32_t option = 0;

    snmp_set_var_typed_value(request->requestvb, ASN_INTEGER,
                             &option, sizeof(int32_t));
}

int DocsLoadBalGrpCfgGet(netsnmp_mib_handler               *handler,
                         netsnmp_handler_registration      *regInfo,
                         netsnmp_agent_request_info        *reqInfo,
                         netsnmp_request_info              *requests)
{
    netsnmp_request_info       *request;
    netsnmp_table_request_info *tableInfo;

    dbgstrm << "Start." << endl;
    for (request=requests; request; request=request->next)
    {
        int32_t id = (int32_t)netsnmp_extract_iterator_context(request);
        dbgstrm << "id = " << id << endl;

        if ((void *)id == NULL)
        {
            dbgstrm << "entry is NULL" << endl;
            netsnmp_set_request_error(reqInfo, request, SNMP_NOSUCHINSTANCE);
            continue;
        }
        tableInfo  = netsnmp_extract_table_info(request);

        map<int, SnmpSetValueToPktHandler>::iterator iter;
        iter = snmpSetValueHandler.find(tableInfo->colnum);
        if(iter != snmpSetValueHandler.end())
        {
            iter->second(reqInfo, requests, id);
        }
        else
        {
            dbgstrm << "Error, wrong table column number";
            netsnmp_set_request_error(reqInfo, request, SNMP_NOSUCHOBJECT);
        }
    }

    return SNMP_ERR_NOERROR;
}

int DocsLoadBalGrpCfgSetReserve1(netsnmp_mib_handler               *handler,
                                 netsnmp_handler_registration      *regInfo,
                                 netsnmp_agent_request_info        *reqInfo,
                                 netsnmp_request_info              *requests)
{
    dbgstrm << "Start." << endl;
    return SNMP_ERR_NOERROR;
}

/* MODE_SET_RESERVE2:
 *    When create new entry, this function allocate resource for new entry.
 *    When modify or query entry,  do nothing.
 * Refer to net-snmp example codes "mteTriggerTable.c" for "mteTriggerTable"
 * of DISMAN-EVENT-MIB.
 */
int DocsLoadBalGrpCfgSetReserve2(netsnmp_mib_handler               *handler,
                                 netsnmp_handler_registration      *regInfo,
                                 netsnmp_agent_request_info        *reqInfo,
                                 netsnmp_request_info              *requests)
{
    netsnmp_request_info       *request;
    netsnmp_table_request_info *tableInfo;

    dbgstrm << "Start." << endl;
    for (request = requests; request; request = request->next)
    {
        tableInfo = netsnmp_extract_table_info(request);

        switch(tableInfo->colnum)
        {
        case ColumnGsCableDocsLoadBalGrpCfgOption:
            /*
             * Create an (empty) new row structure
             */
            switch (*request->requestvb->val.integer)
            {
            case RowStatusCreate:
                /* Note: this index is not content of table.  It is the "Instance" field
                 *       in MIB-Browser.
                 */
                int32_t id = *tableInfo->indexes->val.integer;
                if (CreateLoadBalanceGrp(id, STATIC_LD_BLC, cliGetCmc()) != BASE_OK)
                {
                    cerr << "Failed to create loadbalance group," << endl;
                    netsnmp_set_request_error(reqInfo, request, SNMP_ERR_RESOURCEUNAVAILABLE);
                    return SNMP_ERR_NOERROR;
                }
                netsnmp_insert_iterator_context(request, (void *)id);
                break;

            default:
                break;
            }
            break;

        default:
            break;
        }
    }
    return SNMP_ERR_NOERROR;
}

int DocsLoadBalGrpCfgSetFree(netsnmp_mib_handler               *handler,
                             netsnmp_handler_registration      *regInfo,
                             netsnmp_agent_request_info        *reqInfo,
                             netsnmp_request_info              *requests)
{
    dbgstrm << "Start." << endl;
    return SNMP_ERR_NOERROR;
}

int DocsLoadBalGrpCfgSetAction(netsnmp_mib_handler               *handler,
                               netsnmp_handler_registration      *regInfo,
                               netsnmp_agent_request_info        *reqInfo,
                               netsnmp_request_info              *requests)
{
    dbgstrm << "Start." << endl;
    return SNMP_ERR_NOERROR;
}

int DocsLoadBalGrpCfgSetUndo(netsnmp_mib_handler               *handler,
                             netsnmp_handler_registration      *regInfo,
                             netsnmp_agent_request_info        *reqInfo,
                             netsnmp_request_info              *requests)
{
    dbgstrm << "Start." << endl;
    return SNMP_ERR_NOERROR;
}

/*
 * When modify table,  the program flow is:
 *      SetReserve1()
 *      SetReserve2()
 *      SetAction()
 *      SetCommit() / SetUndo()
 * net-snmp will call this function for every modification separately,
 * so we can't commit once for all modification, we can only call
 * SetFullLoadBalancingGrp() immediately for every field in requests loop.
 */
int DocsLoadBalGrpCfgSetCommit(netsnmp_mib_handler               *handler,
                               netsnmp_handler_registration      *regInfo,
                               netsnmp_agent_request_info        *reqInfo,
                               netsnmp_request_info              *requests)
{
    netsnmp_request_info       *request;
    netsnmp_table_request_info *tableInfo;

    dbgstrm << "Start." << endl;
    for (request=requests; request; request=request->next)
    {
        int32_t index = (int32_t)netsnmp_extract_iterator_context(request);

        dbgstrm << "index = " << index << endl;
        LoadBalGrpCfgT grp;
        BASE_ErrCode errCode = FindLoadBalanceGrp(index, &grp, cliGetCmc());
        if (errCode != BASE_OK)
            break;

        tableInfo = netsnmp_extract_table_info(request);

        int32_t id;
        switch (tableInfo->colnum)
        {
        case ColumnGsCableDocsLoadBalGrpCfgId:
            id = *request->requestvb->val.integer;
            dbgstrm << "index=" << index << ", id=" << id << endl;
            break;

        case ColumnGsCableDocsLoadBalGrpCfgType:
            grp.type = *request->requestvb->val.integer;
            dbgstrm << grp << endl;
            SetFullLoadBalancingGrp(&grp, cliGetCmc());
            break;

        case ColumnGsCableDocsLoadBalGrpCfgDsChList:
            memcpy(grp.dsChList,
                   request->requestvb->val.string,
                   request->requestvb->val_len);
            grp.dsChNumber = request->requestvb->val_len;
            dbgstrm << grp << endl;
            SetFullLoadBalancingGrp(&grp, cliGetCmc());
            break;

        case ColumnGsCableDocsLoadBalGrpCfgUsChList:
            memcpy(grp.usChList,
                   request->requestvb->val.string,
                   request->requestvb->val_len);
            grp.usChNumber = request->requestvb->val_len;
            dbgstrm << grp << endl;
            SetFullLoadBalancingGrp(&grp, cliGetCmc());
            break;

        case ColumnGsCableDocsLoadBalGrpCfgActiveMacAddr:
            /* do not support */
            break;

        case ColumnGsCableDocsLoadBalGrpCfgOption:
            switch (*request->requestvb->val.integer)
            {
            case RowStatusDestroy:
                /* Note: this index is not content of table.  It is the "Instance" field
                 *       in MIB-Browser.
                 */
                int32_t id = *tableInfo->indexes->val.integer;
                if (RemoveLoadBalanceGrp(id, cliGetCmc()) != BASE_OK)
                {
                    cerr << "Failed to remove loadbalance group," << endl;
                    netsnmp_set_request_error(reqInfo, request, SNMP_ERR_RESOURCEUNAVAILABLE);
                    return SNMP_ERR_NOERROR;
                }
                break;

            default:
                break;
            }
            break;

        default:
            break;
        }
    }
    return SNMP_ERR_NOERROR;
}

/** handles requests for the netSnmpIETFWGTable table */
int DocsLoadBalGrpCfgHandler(netsnmp_mib_handler               *handler,
                             netsnmp_handler_registration      *regInfo,
                             netsnmp_agent_request_info        *reqInfo,
                             netsnmp_request_info              *requests)
{
    map<int, SnmpOperationHandler>::iterator iter;
    iter = snmpHandler.find(reqInfo->mode);
    assert(iter != snmpHandler.end());
    iter->second(handler, regInfo, reqInfo, requests);

    return SNMP_ERR_NOERROR;
}
