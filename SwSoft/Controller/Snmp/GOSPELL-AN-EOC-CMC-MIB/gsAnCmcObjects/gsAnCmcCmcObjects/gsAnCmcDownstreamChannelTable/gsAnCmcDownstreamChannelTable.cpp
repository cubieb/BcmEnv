/*
 * Note: this file originally auto-generated by mib2c using
 *  $
 */
#include "SystemInclude.h"
#include "BcmController.h"

#include <net-snmp/net-snmp-config.h>
#include <net-snmp/net-snmp-includes.h>
#include <net-snmp/agent/net-snmp-agent-includes.h>

#include "Debug.h"
#include "ChannelMgt.h"

#include "gsAnCmcDownstreamChannelTable.h"
using namespace std;

static CMCOAM_DsChannelCfgT dsChannelCfg[BRCM_CMC_MAX_DS_CH];

/** Initializes the gsAnCmcDownstreamChannelTable module */
void InitGsAnCmcDownstreamChannelTable(void)
{
    const oid CmcDsChannelTableOid[] = {1,3,6,1,4,1,22764,1015,9026,2,2,4};
    const size_t CmcDsChannelTableOidLen = OID_LENGTH(CmcDsChannelTableOid);

    netsnmp_iterator_info *iinfo;
    netsnmp_handler_registration *reg;
    netsnmp_table_registration_info *table_info;

    DEBUGMSGTL(("CmcDownstreamChannelTable:init", "initializing CmcDownstreamChannelTable\n"));

    reg = netsnmp_create_handler_registration(
              "gsAnCmcDownstreamChannelTable", CmcDsChannelTableHandler,
              CmcDsChannelTableOid, CmcDsChannelTableOidLen,
              HANDLER_CAN_RWRITE
              );

    table_info = SNMP_MALLOC_TYPEDEF( netsnmp_table_registration_info );
    netsnmp_table_helper_add_indexes(table_info,
                           ASN_INTEGER,  /* index: gsAnCmcDownChannelId */
                           0);
    table_info->min_column = ColCmcDoChanName;// ColCmcDoChanId
    table_info->max_column = ColCmcDoChanMtu;
    
    iinfo = SNMP_MALLOC_TYPEDEF( netsnmp_iterator_info );
    iinfo->get_first_data_point = CmcDsChannelTableGetFirst;
    iinfo->get_next_data_point = CmcDsChannelTableGetNext;
    iinfo->table_reginfo = table_info;
    
    netsnmp_register_table_iterator( reg, iinfo );

    /* Initialise the contents of the table here */
}


/* Example iterator hook routines - using 'get_next' to do most of the work */
netsnmp_variable_list *
CmcDsChannelTableGetFirst(void **my_loop_context,
                          void **my_data_context,
                          netsnmp_variable_list *put_index_data,
                          netsnmp_iterator_info *mydata)
{
    dbgstrm << "Start." << endl;
    CMCOAM_DsChannelCfgT cfg, *i = dsChannelCfg;
    BASE_ErrCode ret;

    for (ret = MgtChannelGetFirstDownstreamSettings(&cfg);
        ret == BASE_OK;
        ret = MgtChannelGetNextDownstreamSettings(&cfg, &cfg))
    {
        memcpy(i++, &cfg, sizeof(CMCOAM_DsChannelCfgT));
    }

    *my_loop_context = dsChannelCfg;
    return CmcDsChannelTableGetNext(my_loop_context, my_data_context, put_index_data,  mydata);
}

netsnmp_variable_list *
CmcDsChannelTableGetNext(void **my_loop_context,
                          void **my_data_context,
                          netsnmp_variable_list *put_index_data,
                          netsnmp_iterator_info *mydata)
{
    dbgstrm << "Start." << endl;
    CMCOAM_DsChannelCfgT *cfg = (CMCOAM_DsChannelCfgT *)*my_loop_context;
    if (cfg < dsChannelCfg + BRCM_CMC_MAX_DS_CH)
    {
        snmp_set_var_value(put_index_data, &cfg->ds_ch_id, sizeof(uint8_t));
        *my_data_context = cfg++;
        *my_loop_context = cfg;
        return put_index_data;
    }

    *my_loop_context = NULL;
    *my_data_context = NULL;
    return NULL;
}

typedef int(*CmcDsChanHandlerP)(netsnmp_mib_handler           *handler,
                                      netsnmp_handler_registration  *reginfo,
                                      netsnmp_agent_request_info    *reqinfo,
                                      netsnmp_request_info          *requests);

struct CmcDsChanTableHandlerDispath
{
    int mode;
    CmcDsChanHandlerP handler;
};


int CmcDsChanTableGet(netsnmp_mib_handler               *handler,
                                                    netsnmp_handler_registration      *reginfo,
                                                    netsnmp_agent_request_info        *reqinfo,
                                                    netsnmp_request_info              *requests)
{
    netsnmp_request_info *request;
    netsnmp_table_request_info *tableInfo;

    CMCOAM_DsChannelCfgT *entry;
    char *DsChanName[16] = {"DsChan1", "DsChan2", "DsChan3", "DsChan4", 
                                                "DsChan5", "DsChan6", "DsChan7", "DsChan8",
                                                "DsChan9", "DsChan10", "DsChan11", "DsChan12",
                                                "DsChan13", "DsChan14", "DsChan15", "DsChan16"};

    dbgstrm << "Start." << endl;
    
    for (request=requests; request; request=request->next)
    {
        dbgstrm << "...." << endl;
        
        //This entry we get, it will changed each time
        entry = (CMCOAM_DsChannelCfgT*)netsnmp_extract_iterator_context(request);
        if (entry == NULL)
        {
            dbgstrm << "entry is NULL" << endl;
            netsnmp_set_request_error(reqinfo, request, SNMP_NOSUCHINSTANCE);
            continue;
        }
        dbgstrm << "index=" << entry->ds_ch_id << endl;

        tableInfo = netsnmp_extract_table_info(request);
        switch (tableInfo->colnum)
        {
            case ColCmcDoChanId:
            {                
                dbgstrm << "Colnum = " << ColCmcDoChanId << endl;
                snmp_set_var_typed_integer(request->requestvb, ASN_INTEGER, entry->ds_ch_id);
            }
            break;
            
            case ColCmcDoChanName:
            {                
                dbgstrm << "Colnum = " << ColCmcDoChanName << endl;

                U8 ChanNameLen ;
                if (entry->ds_ch_id < 10)
                    ChanNameLen = 8;
                else
                    ChanNameLen = 9;
                
                snmp_set_var_typed_value(request->requestvb, ASN_OCTET_STR, 
                                DsChanName[entry->ds_ch_id - 1], ChanNameLen);
            }
            break;

            case ColCmcDoChanEnable:
            {                
                dbgstrm << "Colnum = " << ColCmcDoChanEnable << endl;
                snmp_set_var_typed_integer(request->requestvb, ASN_INTEGER, entry->enabled);
            }
            break;
            
            case ColCmcDoChanStatus:
            {                
                dbgstrm << "Colnum = " << ColCmcDoChanStatus << endl;
                snmp_set_var_typed_integer(request->requestvb, ASN_INTEGER, entry->modulatoin);
            }
            break;
            
            case ColCmcDoChanActiveCmCount:
            {                
                dbgstrm << "Colnum = " << ColCmcDoChanActiveCmCount << endl;
                int32_t ActiveCmCount = 0;
                snmp_set_var_typed_integer(request->requestvb, ASN_INTEGER, ActiveCmCount);
            }
            break;
            
            case ColCmcDoChanRegisterCmCount:
            {                
                dbgstrm << "Colnum = " << ColCmcDoChanRegisterCmCount << endl;
                int32_t RegisterCmCount = 0;
                snmp_set_var_typed_integer(request->requestvb, ASN_INTEGER, RegisterCmCount);
            }
            break;

            case ColCmcDoChanUnregisterCmCount:
            {                
                dbgstrm << "Colnum = " << ColCmcDoChanUnregisterCmCount << endl;
                int32_t UnregisterCmCount = 0;
                snmp_set_var_typed_integer(request->requestvb, ASN_INTEGER, UnregisterCmCount);
            }
            break;
            
            case ColCmcDoChanMtu:
            {                
                dbgstrm << "Colnum = " << ColCmcDoChanMtu << endl;
                U32 Mtu = 0;                
                snmp_set_var_typed_integer(request->requestvb, ASN_INTEGER, Mtu);
            }
            break;                       

            default:
                netsnmp_set_request_error(reqinfo, request, SNMP_NOSUCHOBJECT);
            break;            
        }          
    }
    return SNMP_ERR_NOERROR;
}


int CmcDsChanTableSetReserve1(netsnmp_mib_handler      *handler,
                                                                         netsnmp_handler_registration      *reginfo,
                                                                         netsnmp_agent_request_info        *reqinfo,
                                                                         netsnmp_request_info              *requests)
{
    U32 ret;
    netsnmp_request_info *request;
    netsnmp_table_request_info *tableInfo;
   
    dbgstrm << "Start." << endl;
    
    for (request=requests ; request;  request=request->next)
    {
        tableInfo = netsnmp_extract_table_info(request);
        switch (tableInfo->colnum)
        {            
            case ColCmcDoChanEnable:
                /* or possibly 'netsnmp_check_vb_type_and_size' */
                ret = netsnmp_check_vb_int( request->requestvb ); 
                if ( ret != SNMP_ERR_NOERROR ) 
                {
                    netsnmp_set_request_error( reqinfo, request, ret );
                    return SNMP_ERR_NOERROR;
                }
            break;
                
            default:
                netsnmp_set_request_error(reqinfo, request, SNMP_ERR_NOTWRITABLE);
            return SNMP_ERR_NOERROR;
        }
    }
    return SNMP_ERR_NOERROR;
}

int CmcDsChanTableSetReserve2(netsnmp_mib_handler      *handler,
                             netsnmp_handler_registration      *reginfo,
                             netsnmp_agent_request_info        *reqinfo,
                             netsnmp_request_info              *requests)
{
    dbgstrm << "Start." << endl;
    return SNMP_ERR_NOERROR;
}
int CmcDsChanTableSetUndo(netsnmp_mib_handler               *handler,
                            netsnmp_handler_registration      *reginfo,
                            netsnmp_agent_request_info        *reqinfo,
                            netsnmp_request_info              *requests)
{
    dbgstrm << "Start." << endl;
    return SNMP_ERR_NOERROR;
}

int CmcDsChanTableSetFree(netsnmp_mib_handler               *handler,
                             netsnmp_handler_registration      *reginfo,
                             netsnmp_agent_request_info        *reqinfo,
                             netsnmp_request_info              *requests)
{
    dbgstrm << "Start." << endl;
    return SNMP_ERR_NOERROR;
}

int CmcDsChanTableSetAction(netsnmp_mib_handler               *handler,
                             netsnmp_handler_registration      *reginfo,
                             netsnmp_agent_request_info        *reqinfo,
                             netsnmp_request_info              *requests)
{
    dbgstrm << "Start." << endl;
    return SNMP_ERR_NOERROR;
}



int CmcDsChanTableSetCommit(netsnmp_mib_handler               *handler,
                             netsnmp_handler_registration      *reginfo,
                             netsnmp_agent_request_info        *reqinfo,
                             netsnmp_request_info              *requests)
{
    uint32_t ret;
    CMCOAM_UsChannelCfgT *entry;
    netsnmp_request_info *request;
    netsnmp_table_request_info *tableInfo;
       
    dbgstrm << "Start." << endl;
    
    for (request=requests ; request;  request=request->next)
    {
        entry = (CMCOAM_UsChannelCfgT *) netsnmp_extract_iterator_context(request);
        if ( NULL == entry )
        {
            dbgstrm << "entry is NULL" << endl;
            netsnmp_set_request_error(reqinfo, request, SNMP_NOSUCHINSTANCE);
            break;
        }
        
        tableInfo = netsnmp_extract_table_info(request);
        switch (tableInfo->colnum)
        {            
            case ColCmcDoChanEnable:
                ret = MgtChannelSetDownstreamSettingsEnabled(entry->us_ch_id, 
                                                *request->requestvb->val.integer);
                if (ret != BASE_OK)
                {
                    netsnmp_set_request_error(reqinfo, request, SNMP_ERR_COMMITFAILED);
                }       
            break;
        }
    }
    return SNMP_ERR_NOERROR;
}

/** handles requests for the gsAnCmcUpstreamChannelTable table */
int
CmcDsChannelTableHandler(
                netsnmp_mib_handler               *handler,
                netsnmp_handler_registration      *reginfo,
                netsnmp_agent_request_info        *reqinfo,
                netsnmp_request_info              *requests) 
{
    dbgstrm << "Start." << endl;
    DEBUGMSGTL(("gsAnCmcDownstreamChannelTable:handler", "Processing request (%d)\n", reqinfo->mode));
    
    static struct CmcDsChanTableHandlerDispath dispatch[7] =
    {
        /* Read-support (also covers GetNext requests) */
        {MODE_GET, CmcDsChanTableGet},
        /* Write-support */
        {MODE_SET_RESERVE1, CmcDsChanTableSetReserve1},
        {MODE_SET_RESERVE2, CmcDsChanTableSetReserve2},
        {MODE_SET_FREE, CmcDsChanTableSetFree},
        {MODE_SET_ACTION, CmcDsChanTableSetAction},
        {MODE_SET_UNDO, CmcDsChanTableSetUndo},
        {MODE_SET_COMMIT, CmcDsChanTableSetCommit},
    };
    size_t i;
    for (i = 0; i < sizeof(dispatch) /sizeof(struct CmcDsChanTableHandlerDispath); ++i)
    {
        if (reqinfo->mode == dispatch[i].mode)
        {
            int ret;
            ret = (*dispatch[i].handler)(handler, reginfo, reqinfo, requests);
            if (ret != SNMP_ERR_NOERROR)
            {
                printf("CmcDsChannelTableHandler> %d operation failed, ret = %d\n",
                       dispatch[i].mode, ret);
                return ret;
            }
            break;
        }
    }
    return SNMP_ERR_NOERROR;
}
   


