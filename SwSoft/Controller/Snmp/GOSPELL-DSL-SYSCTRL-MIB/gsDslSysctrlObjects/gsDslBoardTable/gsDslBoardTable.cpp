/*
 * Note: this file originally auto-generated by mib2c using
 *  : mib2c.iterate.conf 17695 2009-07-21 12:22:18Z dts12 $
 *
 * Create time: 2015-04-21
 */
#include "SystemInclude.h"
#include "BcmController.h"

#include <net-snmp/net-snmp-config.h>
#include <net-snmp/net-snmp-includes.h>
#include <net-snmp/agent/net-snmp-agent-includes.h>

#include "Util.h"
#include "Debug.h"
#include "SnmpTypes.h"
#include "SystemInfoMgt.h"

#include "gsDslBoardTable.h"

using namespace std;
CxxBeginNameSpace(Snmp)
CxxBeginNameSpace(GsDslBoardTable)

struct GsDSlBoardEntry
{
    /* Index values */
    int32_t rackNo;
    int32_t shelfNo;
    int32_t slotNo;

    /* Column values */
    int32_t type;
    char descr[MaxDescrSize];
    int32_t portNum;
    int32_t portType;
    int32_t adminStatus;
    int32_t operStatus;
    char hardVersion[MaxHardVersionSize];
    char softVersion[MaxSoftVersionSize];
    uint_t softLastChange;
    int32_t reset;
    int32_t cpuLoad;
    int32_t cpuLoadThreshold;
    int32_t memUsage;
    int32_t memUsageThreshold;
    int32_t actPortNum;
    int32_t hardVerStatus;
    int32_t softVerCfg;
    int32_t standByStatus;
    int32_t memTotalSize;
    int32_t workMode;
    char bootwareVersion[MaxBootwareVersionSize];
    int32_t serviceStoppedReason;
    char slaveCpuSwVersion[MaxSoftVersionSize];
    char slaveCpuBootVersion[MaxBootwareVersionSize];
    int32_t cpuTemperature;
    char fwCreateTime[MaxFwCreateTimeSize];
};

GsDSlBoardEntry table[1];

static int Get(netsnmp_mib_handler&, netsnmp_handler_registration&,
    netsnmp_agent_request_info&, netsnmp_request_info&);
static int SetReserve1(netsnmp_mib_handler&, netsnmp_handler_registration&,
    netsnmp_agent_request_info&, netsnmp_request_info&);
static int SetReserve2(netsnmp_mib_handler&, netsnmp_handler_registration&,
    netsnmp_agent_request_info&, netsnmp_request_info&);
static int SetFree(netsnmp_mib_handler&, netsnmp_handler_registration&,
    netsnmp_agent_request_info&, netsnmp_request_info&);
static int SetAction(netsnmp_mib_handler&, netsnmp_handler_registration&,
    netsnmp_agent_request_info&, netsnmp_request_info&);
static int SetUndo(netsnmp_mib_handler&, netsnmp_handler_registration&,
    netsnmp_agent_request_info&, netsnmp_request_info&);
static int SetCommit(netsnmp_mib_handler&, netsnmp_handler_registration&,
    netsnmp_agent_request_info&, netsnmp_request_info&);

static pair<int, SnmpOperationHandler> handlerPairs[] =
{
    make_pair(MODE_GET, Get),
    make_pair(MODE_SET_RESERVE1, SetReserve1),
    make_pair(MODE_SET_RESERVE2, SetReserve2),
    make_pair(MODE_SET_FREE, SetFree),
    make_pair(MODE_SET_ACTION, SetAction),
    make_pair(MODE_SET_UNDO, SetUndo),
    make_pair(MODE_SET_COMMIT, SetCommit)
};
static map<int, SnmpOperationHandler> snmpHandler(handlerPairs, handlerPairs + 7);

/* Get Handler */
static void GetRackNo(netsnmp_agent_request_info& reqInfo,
    netsnmp_request_info& request, void* data);
static void GetShelfNo(netsnmp_agent_request_info& reqInfo,
    netsnmp_request_info& request, void* data);
static void GetSlotNo(netsnmp_agent_request_info& reqInfo,
    netsnmp_request_info& request, void* data);
static void GetType(netsnmp_agent_request_info& reqInfo,
    netsnmp_request_info& request, void* data);
static void GetDescr(netsnmp_agent_request_info& reqInfo,
    netsnmp_request_info& request, void* data);
static void GetPortNum(netsnmp_agent_request_info& reqInfo,
    netsnmp_request_info& request, void* data);
static void GetPortType(netsnmp_agent_request_info& reqInfo,
    netsnmp_request_info& request, void* data);
static void GetAdminStatus(netsnmp_agent_request_info& reqInfo,
    netsnmp_request_info& request, void* data);
static void GetOperStatus(netsnmp_agent_request_info& reqInfo,
    netsnmp_request_info& request, void* data);
static void GetHardVersion(netsnmp_agent_request_info& reqInfo,
    netsnmp_request_info& request, void* data);
static void GetSoftVersion(netsnmp_agent_request_info& reqInfo,
    netsnmp_request_info& request, void* data);
static void GetSoftLastChange(netsnmp_agent_request_info& reqInfo,
    netsnmp_request_info& request, void* data);
static void GetReset(netsnmp_agent_request_info& reqInfo,
    netsnmp_request_info& request, void* data);
static void GetCpuLoad(netsnmp_agent_request_info& reqInfo,
    netsnmp_request_info& request, void* data);
static void GetCpuLoadThreshhold(netsnmp_agent_request_info& reqInfo,
    netsnmp_request_info& request, void* data);
static void GetMemUsage(netsnmp_agent_request_info& reqInfo,
    netsnmp_request_info& request, void* data);
static void GetMemUsageThreshhold(netsnmp_agent_request_info& reqInfo,
    netsnmp_request_info& request, void* data);
static void GetActPortNum(netsnmp_agent_request_info& reqInfo,
    netsnmp_request_info& request, void* data);
static void GetHardVerStatus(netsnmp_agent_request_info& reqInfo,
    netsnmp_request_info& request, void* data);
static void GetSoftVerCfg(netsnmp_agent_request_info& reqInfo,
    netsnmp_request_info& request, void* data);
static void GetStandbyStatus(netsnmp_agent_request_info& reqInfo,
    netsnmp_request_info& request, void* data);
static void GetMemTotalSize(netsnmp_agent_request_info& reqInfo,
    netsnmp_request_info& request, void* data);
static void GetWorkMode(netsnmp_agent_request_info& reqInfo,
    netsnmp_request_info& request, void* data);
static void GetBootWareVersion(netsnmp_agent_request_info& reqInfo,
    netsnmp_request_info& request, void* data);
static void GetServiceStoppedReason(netsnmp_agent_request_info& reqInfo,
    netsnmp_request_info& request, void* data);
static void GetSlaveCpuSwVersion(netsnmp_agent_request_info& reqInfo,
    netsnmp_request_info& request, void* data);
static void GetSlaveCpuBootVersion(netsnmp_agent_request_info& reqInfo,
    netsnmp_request_info& request, void* data);
static void GetCpuTemperature(netsnmp_agent_request_info& reqInfo,
    netsnmp_request_info& request, void* data);
static void GetFwCreateTime(netsnmp_agent_request_info& reqInfo,
    netsnmp_request_info& request, void* data);

static pair<int, SnmpGetHandler> getHandlerPairs[] =
{
    make_pair(ColGsDslBoardRackNo, GetRackNo),
    make_pair(ColGsDslBoardShelfNo, GetShelfNo),
    make_pair(ColGsDslBoardSlotNo, GetSlotNo),
    make_pair(ColGsDslBoardType, GetType),
    make_pair(ColGsDslBoardDescr, GetDescr),
    make_pair(ColGsDslBoardPortNum, GetPortNum),
    make_pair(ColGsDslBoardPortType, GetPortType),
    make_pair(ColGsDslBoardAdminStatus, GetAdminStatus),
    make_pair(ColGsDslBoardOperStatus, GetOperStatus),
    make_pair(ColGsDslBoardHardVersion, GetHardVersion),
    make_pair(ColGsDslBoardSoftVersion, GetSoftVersion),
    make_pair(ColGsDslBoardSoftLastChange, GetSoftLastChange),
    make_pair(ColGsDslBoardReset, GetReset),
    make_pair(ColGsDslBoardCpuLoad, GetCpuLoad),
    make_pair(ColGsDslBoardCpuLoadThreshhold, GetCpuLoadThreshhold),
    make_pair(ColGsDslBoardMemUsage, GetMemUsage),
    make_pair(ColGsDslBoardMemUsageThreshhold, GetMemUsageThreshhold),
    make_pair(ColGsDslBoardActPortNum, GetActPortNum),
    make_pair(ColGsDslBoardHardVerStatus, GetHardVerStatus),
    make_pair(ColGsDslBoardSoftVerCfg, GetSoftVerCfg),
    make_pair(ColGsDslBoardStandbyStatus, GetStandbyStatus),
    make_pair(ColGsDslBoardMemTotalSize, GetMemTotalSize),
    make_pair(ColGsDslBoardWorkMode, GetWorkMode),
    make_pair(ColGsDslBoardBootWareVersion, GetBootWareVersion),
    make_pair(ColGsDslBoardServiceStoppedReason, GetServiceStoppedReason),
    make_pair(ColGsDslBoardSlaveCpuSwVersion, GetSlaveCpuSwVersion),
    make_pair(ColGsDslBoardSlaveCpuBootVersion, GetSlaveCpuBootVersion),
    make_pair(ColGsDslBoardCpuTemperature, GetCpuTemperature),
    make_pair(ColGsDslBoardFwCreateTime, GetFwCreateTime)
};

static map<int, SnmpGetHandler> snmpGetValueHandler(getHandlerPairs, getHandlerPairs+29);

/** Initialize the gsDslBoardTable table by defining its contents and how it's structured */
void InitGDslBoardTable(void)
{
    const oid tableOid[] = {1,3,6,1,4,1,22764,7900,3,1,1,6};
    const size_t oidLen   = OID_LENGTH(tableOid);
    netsnmp_handler_registration *reg;

    reg = netsnmp_create_handler_registration("gsDslBoardTable",
        SnmpTableHandler, tableOid, oidLen, HANDLER_CAN_RWRITE);

    netsnmp_table_registration_info *tableInfo;
    tableInfo = SNMP_MALLOC_TYPEDEF( netsnmp_table_registration_info );
    netsnmp_table_helper_add_indexes(tableInfo,
                           ASN_INTEGER,  /* index: gsDslBoardRackNo */
                           ASN_INTEGER,  /* index: gsDslBoardShelfNo */
                           ASN_INTEGER,  /* index: gsDslBoardSlotNo */
                           0);
    tableInfo->min_column = ColGsDslBoardType;
    tableInfo->max_column = ColGsDslBoardFwCreateTime;

    netsnmp_iterator_info *iinfo;
    iinfo = SNMP_MALLOC_TYPEDEF(netsnmp_iterator_info);
    iinfo->get_first_data_point = GetFirst;
    iinfo->get_next_data_point = GetNext;
    iinfo->table_reginfo = tableInfo;

    netsnmp_register_table_iterator(reg, iinfo);

    table[0].rackNo = 0;
    table[0].actPortNum = 0;
    table[0].slotNo = 0;
    table[0].type = 0;
    strncpy(table[0].descr, "Switch board", MaxDescrSize);
    table[0].portNum = 2;
    table[0].portType = 0;
    table[0].adminStatus = 1;
    table[0].operStatus = 1; /* should obtain port status from switch board. */
    strncpy(table[0].hardVersion, "Hard version 1.0", MaxHardVersionSize);
    strncpy(table[0].softVersion, "Software version 1.0", MaxSoftVersionSize);
    table[0].softLastChange = 0;
    table[0].reset = 0;
    table[0].memTotalSize = 0;
    table[0].workMode = 0;
    strncpy(table[0].bootwareVersion, "CFE version 5.1.4", MaxBootwareVersionSize);
    strncpy(table[0].slaveCpuSwVersion, "CFE version 5.1.4", MaxSoftVersionSize);
    strncpy(table[0].slaveCpuBootVersion, "CFE version 5.1.4", MaxBootwareVersionSize);
    strncpy(table[0].fwCreateTime, "2015-04-23", MaxFwCreateTimeSize);
}

netsnmp_variable_list *GetFirst(void **loopContext,
    void **dataContext,
    netsnmp_variable_list *indexData,
    netsnmp_iterator_info *data)
{
    GsDSlBoardEntry *entry = &table[0];
    netsnmp_variable_list *idx = indexData;

    float floatValue;
    unsigned long longValue;

    GetCpuUsingMgt(&floatValue);
    table[0].cpuLoad = static_cast<int32_t>(floatValue * 100);

    GetMaxCpuUsingMgt(&floatValue);
    table[0].cpuLoadThreshold = static_cast<int32_t>(floatValue * 100);

    GetRamUsingMgt(&longValue);
    table[0].memUsage = static_cast<int32_t>(longValue);

    GetMaxRamUsingMgt(&longValue);
    table[0].memUsageThreshold = static_cast<int32_t>(longValue);
    table[0].actPortNum = 0;
    table[0].hardVerStatus = 0;
    table[0].softVerCfg = 0;
    table[0].standByStatus = 0;
    table[0].serviceStoppedReason = 0;
    table[0].cpuTemperature = 0;

    snmp_set_var_typed_integer(idx, ASN_INTEGER, entry->rackNo);
    idx = idx->next_variable;
    snmp_set_var_typed_integer(idx, ASN_INTEGER, entry->shelfNo);
    idx = idx->next_variable;
    snmp_set_var_typed_integer(idx, ASN_INTEGER, entry->slotNo);

    *loopContext = (void *)entry;
    *dataContext = (void *)entry;

    return indexData;
}

netsnmp_variable_list *GetNext(void **loopContext,
    void **dataContext,
    netsnmp_variable_list *indexData,
    netsnmp_iterator_info *data)
{
    return NULL;
}

void GetRackNo(netsnmp_agent_request_info& reqInfo,
    netsnmp_request_info& request, void* data)
{
    GsDSlBoardEntry *entry = reinterpret_cast<GsDSlBoardEntry*>(data);
    snmp_set_var_typed_integer(request.requestvb, ASN_INTEGER, entry->rackNo);
}

void GetShelfNo(netsnmp_agent_request_info& reqInfo,
    netsnmp_request_info& request, void* data)
{
    GsDSlBoardEntry *entry = reinterpret_cast<GsDSlBoardEntry*>(data);
    snmp_set_var_typed_integer(request.requestvb, ASN_INTEGER, entry->shelfNo);
}

void GetSlotNo(netsnmp_agent_request_info& reqInfo,
    netsnmp_request_info& request, void* data)
{
    GsDSlBoardEntry *entry = reinterpret_cast<GsDSlBoardEntry*>(data);
    snmp_set_var_typed_integer(request.requestvb, ASN_INTEGER, entry->slotNo);
}

void GetType(netsnmp_agent_request_info& reqInfo,
    netsnmp_request_info& request, void* data)
{
    GsDSlBoardEntry *entry = reinterpret_cast<GsDSlBoardEntry*>(data);
    snmp_set_var_typed_integer(request.requestvb, ASN_INTEGER, entry->type);
}

void GetDescr(netsnmp_agent_request_info& reqInfo,
    netsnmp_request_info& request, void* data)
{
    GsDSlBoardEntry *entry = reinterpret_cast<GsDSlBoardEntry*>(data);
    snmp_set_var_typed_value(request.requestvb, ASN_OCTET_STR,
        entry->descr,
        strnlen(entry->descr, MaxDescrSize));
}

void GetPortNum(netsnmp_agent_request_info& reqInfo,
    netsnmp_request_info& request, void* data)
{
    GsDSlBoardEntry *entry = reinterpret_cast<GsDSlBoardEntry*>(data);
    snmp_set_var_typed_integer(request.requestvb, ASN_INTEGER, entry->portNum);
}

void GetPortType(netsnmp_agent_request_info& reqInfo,
    netsnmp_request_info& request, void* data)
{
    GsDSlBoardEntry *entry = reinterpret_cast<GsDSlBoardEntry*>(data);
    snmp_set_var_typed_integer(request.requestvb, ASN_INTEGER, entry->portType);
}

void GetAdminStatus(netsnmp_agent_request_info& reqInfo,
    netsnmp_request_info& request, void* data)
{
    GsDSlBoardEntry *entry = reinterpret_cast<GsDSlBoardEntry*>(data);
    snmp_set_var_typed_integer(request.requestvb, ASN_INTEGER, entry->adminStatus);
}

void GetOperStatus(netsnmp_agent_request_info& reqInfo,
    netsnmp_request_info& request, void* data)
{
    GsDSlBoardEntry *entry = reinterpret_cast<GsDSlBoardEntry*>(data);
    snmp_set_var_typed_integer(request.requestvb, ASN_INTEGER, entry->operStatus);
}

void GetHardVersion(netsnmp_agent_request_info& reqInfo,
    netsnmp_request_info& request, void* data)
{
    GsDSlBoardEntry *entry = reinterpret_cast<GsDSlBoardEntry*>(data);
    snmp_set_var_typed_value(request.requestvb, ASN_OCTET_STR,
        entry->hardVersion,
        strnlen(entry->hardVersion, MaxHardVersionSize));
}

void GetSoftVersion(netsnmp_agent_request_info& reqInfo,
    netsnmp_request_info& request, void* data)
{
    GsDSlBoardEntry *entry = reinterpret_cast<GsDSlBoardEntry*>(data);
    snmp_set_var_typed_value(request.requestvb, ASN_OCTET_STR,
        entry->softVersion, strlen(entry->softVersion));
}

void GetSoftLastChange(netsnmp_agent_request_info& reqInfo,
    netsnmp_request_info& request, void* data)
{
    GsDSlBoardEntry *entry = reinterpret_cast<GsDSlBoardEntry*>(data);
    snmp_set_var_typed_integer(request.requestvb, ASN_TIMETICKS,
        entry->softLastChange);
}

void GetReset(netsnmp_agent_request_info& reqInfo,
    netsnmp_request_info& request, void* data)
{
    GsDSlBoardEntry *entry = reinterpret_cast<GsDSlBoardEntry*>(data);
    snmp_set_var_typed_integer(request.requestvb, ASN_INTEGER,
        entry->reset);
}

void GetCpuLoad(netsnmp_agent_request_info& reqInfo,
    netsnmp_request_info& request, void* data)
{
    GsDSlBoardEntry *entry = reinterpret_cast<GsDSlBoardEntry*>(data);
    snmp_set_var_typed_integer(request.requestvb, ASN_INTEGER,
        entry->cpuLoad);
}

void GetCpuLoadThreshhold(netsnmp_agent_request_info& reqInfo,
    netsnmp_request_info& request, void* data)
{
    GsDSlBoardEntry *entry = reinterpret_cast<GsDSlBoardEntry*>(data);
    snmp_set_var_typed_integer(request.requestvb, ASN_INTEGER,
        entry->cpuLoadThreshold);
}

void GetMemUsage(netsnmp_agent_request_info& reqInfo,
    netsnmp_request_info& request, void* data)
{
    GsDSlBoardEntry *entry = reinterpret_cast<GsDSlBoardEntry*>(data);
    snmp_set_var_typed_integer(request.requestvb, ASN_INTEGER,
        entry->memUsage);
}

void GetMemUsageThreshhold(netsnmp_agent_request_info& reqInfo,
    netsnmp_request_info& request, void* data)
{
    GsDSlBoardEntry *entry = reinterpret_cast<GsDSlBoardEntry*>(data);
    snmp_set_var_typed_integer(request.requestvb, ASN_INTEGER,
        entry->memUsageThreshold);
}

void GetActPortNum(netsnmp_agent_request_info& reqInfo,
    netsnmp_request_info& request, void* data)
{
    GsDSlBoardEntry *entry = reinterpret_cast<GsDSlBoardEntry*>(data);
    snmp_set_var_typed_integer(request.requestvb, ASN_INTEGER,
        entry->actPortNum);
}

void GetHardVerStatus(netsnmp_agent_request_info& reqInfo,
    netsnmp_request_info& request, void* data)
{
    GsDSlBoardEntry *entry = reinterpret_cast<GsDSlBoardEntry*>(data);
    snmp_set_var_typed_integer(request.requestvb, ASN_INTEGER,
        entry->hardVerStatus);
}

void GetSoftVerCfg(netsnmp_agent_request_info& reqInfo,
    netsnmp_request_info& request, void* data)
{
    GsDSlBoardEntry *entry = reinterpret_cast<GsDSlBoardEntry*>(data);
    snmp_set_var_typed_integer(request.requestvb, ASN_INTEGER,
        entry->softVerCfg);
}

void GetStandbyStatus(netsnmp_agent_request_info& reqInfo,
    netsnmp_request_info& request, void* data)
{
    GsDSlBoardEntry *entry = reinterpret_cast<GsDSlBoardEntry*>(data);
    snmp_set_var_typed_integer(request.requestvb, ASN_INTEGER,
        entry->standByStatus);
}

static void GetMemTotalSize(netsnmp_agent_request_info& reqInfo,
    netsnmp_request_info& request, void* data)
{
    GsDSlBoardEntry *entry = reinterpret_cast<GsDSlBoardEntry*>(data);
    snmp_set_var_typed_integer(request.requestvb, ASN_INTEGER,
        entry->memTotalSize);
}

void GetWorkMode(netsnmp_agent_request_info& reqInfo,
    netsnmp_request_info& request, void* data)
{
    GsDSlBoardEntry *entry = reinterpret_cast<GsDSlBoardEntry*>(data);
    snmp_set_var_typed_integer(request.requestvb, ASN_INTEGER,
        entry->workMode);
}

void GetBootWareVersion(netsnmp_agent_request_info& reqInfo,
    netsnmp_request_info& request, void* data)
{
    GsDSlBoardEntry *entry = reinterpret_cast<GsDSlBoardEntry*>(data);
    snmp_set_var_typed_value(request.requestvb, ASN_OCTET_STR,
        entry->bootwareVersion,
        strnlen(entry->bootwareVersion, MaxBootwareVersionSize));
}

void GetServiceStoppedReason(netsnmp_agent_request_info& reqInfo,
    netsnmp_request_info& request, void* data)
{
    GsDSlBoardEntry *entry = reinterpret_cast<GsDSlBoardEntry*>(data);
    snmp_set_var_typed_integer(request.requestvb, ASN_INTEGER,
        entry->serviceStoppedReason);
}

void GetSlaveCpuSwVersion(netsnmp_agent_request_info& reqInfo,
    netsnmp_request_info& request, void* data)
{
    GsDSlBoardEntry *entry = reinterpret_cast<GsDSlBoardEntry*>(data);
    snmp_set_var_typed_value(request.requestvb, ASN_OCTET_STR,
        entry->slaveCpuSwVersion,
        strnlen(entry->slaveCpuSwVersion, MaxSoftVersionSize));
}

void GetSlaveCpuBootVersion(netsnmp_agent_request_info& reqInfo,
    netsnmp_request_info& request, void* data)
{
    GsDSlBoardEntry *entry = reinterpret_cast<GsDSlBoardEntry*>(data);
    snmp_set_var_typed_value(request.requestvb, ASN_OCTET_STR,
        entry->slaveCpuBootVersion,
        strnlen(entry->slaveCpuBootVersion, MaxBootwareVersionSize));
}

void GetCpuTemperature(netsnmp_agent_request_info& reqInfo,
    netsnmp_request_info& request, void* data)
{
    GsDSlBoardEntry *entry = reinterpret_cast<GsDSlBoardEntry*>(data);
    snmp_set_var_typed_integer(request.requestvb, ASN_INTEGER,
        entry->cpuTemperature);
}

void GetFwCreateTime(netsnmp_agent_request_info& reqInfo,
    netsnmp_request_info& request, void* data)
{
    GsDSlBoardEntry *entry = reinterpret_cast<GsDSlBoardEntry*>(data);
    snmp_set_var_typed_value( request.requestvb, ASN_OCTET_STR,
        entry->fwCreateTime,
        strnlen(entry->fwCreateTime, MaxFwCreateTimeSize));
}

int Get(netsnmp_mib_handler& handler, netsnmp_handler_registration& regInfo,
    netsnmp_agent_request_info& reqInfo, netsnmp_request_info& requests)
{
    netsnmp_request_info *request;
    netsnmp_table_request_info *tableInfo;

    dbgstrm << "Start." << endl;
    for (request = &requests; request != NULL; request = request->next)
    {
        void *entry = netsnmp_extract_iterator_context(request);
        if (entry == NULL)
        {
            dbgstrm << "entry is NULL" << endl;
            netsnmp_set_request_error(&reqInfo, request, SNMP_NOSUCHINSTANCE);
            continue;
        }

        tableInfo = netsnmp_extract_table_info(request);

        map<int, SnmpGetHandler>::iterator iter;
        iter = snmpGetValueHandler.find(tableInfo->colnum);
        if (iter != snmpGetValueHandler.end())
        {
            iter->second(reqInfo, *request, entry);
        }
        else
        {
            netsnmp_set_request_error(&reqInfo, request, SNMP_NOSUCHOBJECT);
        }
    }

    return SNMP_ERR_NOERROR;
}

int SetReserve1(netsnmp_mib_handler& handler, netsnmp_handler_registration& regInfo,
    netsnmp_agent_request_info& reqInfo, netsnmp_request_info& requests)
{
    netsnmp_request_info *request;
    netsnmp_table_request_info *tableInfo;

    dbgstrm << "Start." << endl;

    long longValue;
    for (request = &requests; request; request = request->next)
    {
        tableInfo = netsnmp_extract_table_info(request);
        switch (tableInfo->colnum)
        {
        case ColGsDslBoardCpuLoadThreshhold:
        case ColGsDslBoardMemUsageThreshhold:
            longValue = *request->requestvb->val.integer;
            if (longValue < 0 || longValue > 100)
            {
                netsnmp_set_request_error(&reqInfo, request, SNMP_ERR_BADVALUE);
                return SNMP_ERR_NOERROR;
            }
            break;
        }
    }
    return SNMP_ERR_NOERROR;
}

int SetReserve2(netsnmp_mib_handler&, netsnmp_handler_registration&,
    netsnmp_agent_request_info&, netsnmp_request_info&)
{
    return SNMP_ERR_NOERROR;
}

int SetFree(netsnmp_mib_handler&, netsnmp_handler_registration&,
    netsnmp_agent_request_info&, netsnmp_request_info&)
{
    return SNMP_ERR_NOERROR;
}

int SetAction(netsnmp_mib_handler& handler, netsnmp_handler_registration& regInfo,
    netsnmp_agent_request_info& reqInfo, netsnmp_request_info& requests)
{
    netsnmp_request_info *request;
    netsnmp_table_request_info *tableInfo;

    dbgstrm << "Start." << endl;

    long longValue;
    float floatValue;
    for (request = &requests; request; request = request->next)
    {
        tableInfo = netsnmp_extract_table_info(request);
        switch (tableInfo->colnum)
        {
        case ColGsDslBoardCpuLoadThreshhold:
            floatValue = static_cast<float>(*request->requestvb->val.integer);
            SetMaxCpuUsingMgt(floatValue / 100);
            break;

        case ColGsDslBoardMemUsageThreshhold:
            longValue = *request->requestvb->val.integer;
            SetMaxRamUsingMgt(longValue);
            break;
        }
    }

    return SNMP_ERR_NOERROR;
}

static int SetUndo(netsnmp_mib_handler&, netsnmp_handler_registration&,
    netsnmp_agent_request_info&, netsnmp_request_info&)
{
    return SNMP_ERR_NOERROR;
}

int SetCommit(netsnmp_mib_handler&, netsnmp_handler_registration&,
    netsnmp_agent_request_info&, netsnmp_request_info&)
{
    return SNMP_ERR_NOERROR;
}

/** handles requests for the gsDslBoardTable table */
int SnmpTableHandler(netsnmp_mib_handler *handler,
    netsnmp_handler_registration *regInfo,
    netsnmp_agent_request_info *reqInfo,
    netsnmp_request_info *requests)
{
    map<int, SnmpOperationHandler>::iterator iter;

    dbgstrm << "Start." << endl;
    iter = snmpHandler.find(reqInfo->mode);
    assert(iter != snmpHandler.end());
    iter->second(*handler, *regInfo, *reqInfo, *requests);

    return SNMP_ERR_NOERROR;
}

CxxEndNameSpace /* namespace GsDslBoardTable */
CxxEndNameSpace /* namespace Snmp */
